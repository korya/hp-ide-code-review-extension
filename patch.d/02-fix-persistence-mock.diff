commit 9927e1b4e33726fccf0fe904c526d91d17f2d98c
Author: korya <korya@github.com>
Date:   Thu Feb 13 19:29:37 2014 +0200

    Fix for persistence mock implementation

diff --git a/server/open-source/persistence/persistence-mock.js b/server/open-source/persistence/persistence-mock.js
index 8ef26f9..fe8cfcd 100644
--- a/server/open-source/persistence/persistence-mock.js
+++ b/server/open-source/persistence/persistence-mock.js
@@ -11,6 +11,31 @@ var map = require(path.join(global.rootDirectory, 'core/lib/map.js'));
 var logger = require(path.join(global.rootDirectory, 'core/logging')).getLogger('persistence/mock-persistence');
 var databases = [];
 
+/* Support mongo's dot notation */
+function getPathValue(path, object) {
+    var parts = path.indexOf('.') === -1 ? [path] : path.split('.');
+
+    for (var i = 0; i < parts.length; i++) {
+        if (!object.hasOwnProperty(parts[i]))
+            return;
+
+        object = object[parts[i]];
+    }
+
+    return object;
+}
+
+function testCriteria(criteria, object) {
+    for (var criterion in criteria) {
+        if (criteria.hasOwnProperty(criterion)) {
+            if (getPathValue(criterion, object) !== criteria[criterion])
+                return false;
+	}
+    }
+
+    return true;
+}
+
 function Db(dbName) {
     this.persistence = new map();
     this.indexes = new map();
@@ -82,13 +107,8 @@ Db.prototype.get = function (collection, criteria, projection, callback) {
         var matching = [];
         for (var i = 0; i < foundCollection.length; i++) {
             var value = foundCollection[i];
-            var match = true;
-            for (var criterion in criteria) {
-                if (criteria.hasOwnProperty(criterion)) {
-                    match = value.hasOwnProperty(criterion) && value[criterion] === criteria[criterion];
-                }
-            }
-            if (match) {
+
+	    if (testCriteria(criteria, value)) {
                 matching.push(value);
             }
         }
@@ -133,7 +153,7 @@ Db.prototype.insert = function (collection, value, callback) {
     var duplicate = false;
     for (var i = 0; i < foundCollection.length; i++) {
         var document = foundCollection[i];
-        var collectionIndexes = this.indexes.get(collection);
+	var collectionIndexes = this.indexes.get(collection) || [];
         var length = collectionIndexes.length;
         for (var j = 0; j < length; j++) {
             var index = collectionIndexes[j];
@@ -174,13 +194,8 @@ Db.prototype.update = function (collection, query, value, callback) {
         var updated = [];
         for (var i = 0; i < foundCollection.length; i++) {
             var document = foundCollection[i];
-            var match = true;
-            for (var criterion in query) {
-                if (query.hasOwnProperty(criterion)) {
-                    match = document.hasOwnProperty(criterion) && document[criterion] === query[criterion];
-                }
-            }
-            if (match) {
+
+	    if (testCriteria(query, document)) {
                 //update fields
                 for (var updatedField in value) {
                     //Add or update field
